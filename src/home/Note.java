/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package home;
import java.awt.AWTException;
import java.awt.HeadlessException;
import java.io.File;
import java.sql.ResultSetMetaData;
import java.text.MessageFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ubuntuseebee
 */
public final class Note extends javax.swing.JFrame {
    PreparedStatement pst = null;
    ResultSet rs = null;
    int q, i, id, deleteItem;

    /**
     * Creates new form Note
     */
    public Note() {
        this.setIconImage(new ImageIcon(getClass().getResource("/icons/icon.png")).getImage());
        initComponents();
        upDateDB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rSButtonRound1 = new rojeru_san.rsbutton.RSButtonRound();
        rSButtonRound7 = new rojeru_san.rsbutton.RSButtonRound();
        rSButtonRound6 = new rojeru_san.rsbutton.RSButtonRound();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tn = new rojeru_san.complementos.TableMetro();
        print = new rojeru_san.rsbutton.RSButtonRound();
        add = new rojeru_san.rsbutton.RSButtonRound();
        update = new rojeru_san.rsbutton.RSButtonRound();
        delete = new rojeru_san.rsbutton.RSButtonRound();
        datee = new rojeru_san.rsdate.RSDateChooser();
        subject = new RSMaterialComponent.RSTextFieldMaterial();
        note = new RSMaterialComponent.RSTextFieldMaterial();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lifely Todo");

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lifely.png"))); // NOI18N
        jLabel1.setText("Version 1.0");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 80, 50));

        rSButtonRound1.setText("Log Out");
        rSButtonRound1.setBorderPainted(false);
        rSButtonRound1.setFocusable(false);
        rSButtonRound1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRound1ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonRound1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 90, 30));

        rSButtonRound7.setText("Contact Us");
        rSButtonRound7.setBorderPainted(false);
        rSButtonRound7.setFocusable(false);
        rSButtonRound7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRound7ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonRound7, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, 110, 30));

        rSButtonRound6.setText("Back");
        rSButtonRound6.setBorderPainted(false);
        rSButtonRound6.setFocusable(false);
        rSButtonRound6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRound6ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonRound6, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 10, 80, 30));

        jLabel5.setFont(new java.awt.Font("Roboto Slab", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(39, 144, 250));
        jLabel5.setText("Todo");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 0, 110, 50));

        jLabel7.setForeground(new java.awt.Color(62, 1, 1));
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/line.png"))); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(-390, 30, 1320, -1));

        tn.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        tn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Note", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tn.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tn.setColorFilasBackgound2(new java.awt.Color(255, 255, 255));
        tn.setDragEnabled(true);
        tn.setRowHeight(30);
        tn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tnMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tn);
        if (tn.getColumnModel().getColumnCount() > 0) {
            tn.getColumnModel().getColumn(0).setPreferredWidth(30);
            tn.getColumnModel().getColumn(2).setMinWidth(300);
            tn.getColumnModel().getColumn(2).setPreferredWidth(300);
            tn.getColumnModel().getColumn(2).setMaxWidth(300);
            tn.getColumnModel().getColumn(3).setPreferredWidth(45);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 650, 420));

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        jPanel1.add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 370, 90, -1));

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        jPanel1.add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, 110, -1));

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel1.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 90, -1));

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel1.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 320, 90, -1));

        datee.setLanguage(rojeru_san.rsdate.RSDateChooser.Language.ENGLISH);
        datee.setPlaceholder("Select Date");
        jPanel1.add(datee, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 150, -1));

        subject.setPlaceholder("Title");
        subject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectActionPerformed(evt);
            }
        });
        jPanel1.add(subject, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, 60));

        note.setPlaceholder("Note");
        note.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteActionPerformed(evt);
            }
        });
        jPanel1.add(note, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, 80));

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonRound1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRound1ActionPerformed
        File f = new File("user.txt");
        f.delete();
        TrayIco t = new TrayIco();
        t.mes = "Logged Out";
        try {
            t.main();
        } catch (AWTException ex) {
            Logger.getLogger(Dash.class.getName()).log(Level.SEVERE, null, ex);
        }
        Login.main();
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_rSButtonRound1ActionPerformed

    private void rSButtonRound7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRound7ActionPerformed
        Contact.main();
        //dispose();// TODO add your handling code here:
    }//GEN-LAST:event_rSButtonRound7ActionPerformed

    private void rSButtonRound6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRound6ActionPerformed
        Dash.main();
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_rSButtonRound6ActionPerformed
    int noteid;
    private void tnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tnMouseClicked

        try {
            // if (!tn.isRowSelected(0 - 2000)) {
            //     JOptionPane.showMessageDialog(this, "note is not selected");
            /// } else {
            DefaultTableModel RecordTable = (DefaultTableModel) tn.getModel();
            int SelectedRows = tn.getSelectedRow();
            noteid = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0).toString());
            subject.setText(RecordTable.getValueAt(SelectedRows, 1).toString());
            note.setText(RecordTable.getValueAt(SelectedRows, 2).toString());
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/mm/dd");
            String d = RecordTable.getValueAt(SelectedRows, 3).toString();
            Date dd;
            dd = (Date) formatter.parse(d);
            datee.setDatoFecha(dd);
            //jtxtPostCode.setText(RecordTable.getValueAt(SelectedRows, 5).toString());
            //jtxtTelephone.setText(RecordTable.getValueAt(SelectedRows, 6).toString());
            // }
        } catch (ParseException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tnMouseClicked

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        MessageFormat header = new MessageFormat("Notes in Lifely");
        MessageFormat footer = new MessageFormat("Page {0, number, integer}");

        try {
            tn.print(JTable.PrintMode.NORMAL, header, footer);
        } catch (java.awt.print.PrinterException e) {
            System.err.format("No Printer found", e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_printActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        DefaultTableModel RecordTable = (DefaultTableModel) tn.getModel();
        int SelectedRows = tn.getSelectedRow();

        try {
            id = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0).toString());
            pst = DB.getConnection().prepareStatement("update notes set Subject = ?, Note =?,Date=? where id =?");

            pst.setString(1, subject.getText());
            pst.setString(2, note.getText());
            pst.setString(3, datee.getDatoFecha().getYear() + 1900 + "/" + (datee.getDatoFecha().getMonth() + 1) + "/" + datee.getDatoFecha().getDate());
            pst.setInt(4, noteid);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Record Updated");
            upDateDB();
            subject.setText("");
            note.setText("");
        } catch (SQLException ex) {

            System.err.println(ex);
        } catch (HeadlessException | NumberFormatException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }         // TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        DefaultTableModel RecordTable = (DefaultTableModel) tn.getModel();
        int SelectedRows = tn.getSelectedRow();

        try {
            id = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0).toString());

            deleteItem = JOptionPane.showConfirmDialog(null, "Confirm if you want to delete item",
                    "Warning", JOptionPane.YES_NO_OPTION);
            if (deleteItem == JOptionPane.YES_OPTION) {
              
                pst = DB.getConnection().prepareStatement("delete from notes where id =?");

                pst.setInt(1, id);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Record updated");
                upDateDB();

                subject.setText("");
                note.setText("");
                subject.requestFocus();

            }

        } catch (SQLException ex) {
            System.err.println(ex);

        } catch (HeadlessException | NumberFormatException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_deleteActionPerformed

    private void subjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectActionPerformed

    private void noteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noteActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        if(subject.getText().equals("")||note.getText().equals("")){
            Toaster t=new Toaster(jPanel1);
            t.error("Please enter data firsts");
        }else{
        try {
     
            pst = DB.getConnection().prepareStatement("insert into Notes(UserID,Subject,Note,Date)value(?,?,?,?)");
            id = UserDB.getUserID();
            System.out.println(id);
            pst.setInt(1, id);
            pst.setString(2, subject.getText());
            pst.setString(3, note.getText());
            pst.setString(4, datee.getDatoFecha().getYear() + 1900 + "/" + (datee.getDatoFecha().getMonth() + 1) + "/" + datee.getDatoFecha().getDate());
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "New Note Added");
            upDateDB();
        } //
 catch (SQLException ex) {
            System.err.println(ex);
        }        catch (HeadlessException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }            //tn.add
    }
    }//GEN-LAST:event_addActionPerformed
    private void tnRightMouseButton(java.awt.event.MouseEvent ev){
        delete.doClick();
    }
    private void tnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tnMousePressed
//delete.doClick();

        // TODO add your handling code here:
    }//GEN-LAST:event_tnMousePressed
    public void upDateDB() {
        try {

     
            id = UserDB.getUserID();
            pst = DB.getConnection().prepareStatement("select * from Notes where UserID=" + id);

            rs = pst.executeQuery();
            ResultSetMetaData StData = rs.getMetaData();

            q = StData.getColumnCount();

            DefaultTableModel RecordTable = (DefaultTableModel) tn.getModel();
            RecordTable.setRowCount(0);

            while (rs.next()) {

                Vector columnData = new Vector();

                for (i = 1; i <= q; i++) {
                    columnData.add(rs.getInt("ID"));
                    columnData.add(rs.getString("Subject"));
                    columnData.add(rs.getString("Note"));
                    columnData.add(rs.getString("Date"));
                }
                RecordTable.addRow(columnData);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    /**
     */
    public static void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Note().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojeru_san.rsbutton.RSButtonRound add;
    private rojeru_san.rsdate.RSDateChooser datee;
    private rojeru_san.rsbutton.RSButtonRound delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private RSMaterialComponent.RSTextFieldMaterial note;
    private rojeru_san.rsbutton.RSButtonRound print;
    private rojeru_san.rsbutton.RSButtonRound rSButtonRound1;
    private rojeru_san.rsbutton.RSButtonRound rSButtonRound6;
    private rojeru_san.rsbutton.RSButtonRound rSButtonRound7;
    private RSMaterialComponent.RSTextFieldMaterial subject;
    private rojeru_san.complementos.TableMetro tn;
    private rojeru_san.rsbutton.RSButtonRound update;
    // End of variables declaration//GEN-END:variables
}
